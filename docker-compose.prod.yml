# NASA Exoplanet Detection Platform - Cloud Deployment
version: '3.8'

services:
  # MongoDB (Using cloud service recommended)
  mongodb:
    image: mongo:7
    container_name: exoplanet_mongodb_prod
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
      MONGO_INITDB_DATABASE: ${DATABASE_NAME}
    volumes:
      - mongodb_data:/data/db
    networks:
      - exoplanet_network
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Redis (Using cloud service recommended)
  redis:
    image: redis:7-alpine
    container_name: exoplanet_redis_prod
    restart: always
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - exoplanet_network
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # FastAPI Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: exoplanet_backend_prod
    restart: always
    ports:
      - "8000:8000"
    environment:
      - MONGODB_URL=${MONGODB_URL}
      - REDIS_URL=${REDIS_URL}
      - DATABASE_NAME=${DATABASE_NAME}
      - SECRET_KEY=${SECRET_KEY}
      - NASA_API_KEY=${NASA_API_KEY}
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
    depends_on:
      - mongodb
      - redis
    volumes:
      - ./models:/app/models
    networks:
      - exoplanet_network
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Celery Worker for Background Tasks
  celery_worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: exoplanet_celery_worker_prod
    restart: always
    environment:
      - MONGODB_URL=${MONGODB_URL}
      - REDIS_URL=${REDIS_URL}
      - DATABASE_NAME=${DATABASE_NAME}
      - SECRET_KEY=${SECRET_KEY}
      - NASA_API_KEY=${NASA_API_KEY}
    depends_on:
      - mongodb
      - redis
    volumes:
      - ./models:/app/models
    networks:
      - exoplanet_network
    command: celery -A app.tasks.celery worker --loglevel=info --concurrency=2
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Celery Beat for Scheduled Tasks
  celery_beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: exoplanet_celery_beat_prod
    restart: always
    environment:
      - MONGODB_URL=${MONGODB_URL}
      - REDIS_URL=${REDIS_URL}
      - DATABASE_NAME=${DATABASE_NAME}
      - SECRET_KEY=${SECRET_KEY}
      - NASA_API_KEY=${NASA_API_KEY}
    depends_on:
      - mongodb
      - redis
    volumes:
      - ./models:/app/models
    networks:
      - exoplanet_network
    command: celery -A app.tasks.celery beat --loglevel=info
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # React Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
      args:
        - REACT_APP_API_URL=${REACT_APP_API_URL}
    container_name: exoplanet_frontend_prod
    restart: always
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - exoplanet_network
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Nginx Load Balancer and Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: exoplanet_nginx_prod
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./docker/ssl:/etc/nginx/ssl:ro
      - ./docker/logs:/var/log/nginx
    depends_on:
      - backend
      - frontend
    networks:
      - exoplanet_network
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local

networks:
  exoplanet_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16